{
  "id": "api/common/NgIf",
  "title": "NgIf",
  "contents": "\n\n<article>\n  <div class=\"github-links\">\n  <a href=\"https://github.com/angular/angular/edit/master/packages/common/src/directives/ng_if.ts?message=docs(common)%3A%20describe%20your%20change...#L10-L237\" aria-label=\"建议修改\" title=\"建议修改\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  <a href=\"https://github.com/angular/angular/tree/6.1.0/packages/common/src/directives/ng_if.ts#L10-L237\" aria-label=\"查看源码\" title=\"查看源码\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n</div>\n  <div class=\"breadcrumb\">\n    <script type=\"application/ld+json\">\n      {\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"BreadcrumbList\",\n        \"itemListElement\": [\n          { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.cn//api\", \"name\": \"API\" } },\n          { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.cn/api/common\", \"name\": \"@angular/common\" } },\n          { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.cn/api/common/NgIf\", \"name\": \"NgIf\" } }\n        ]\n      }\n    </script>\n      <a href=\"/api\">API</a> / <a href=\"api/common\">@angular/common</a>\n  </div>\n  <header class=\"api-header\">\n    <h1 id=\"ngif\">NgIf<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgIf#ngif\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label directive\">directive</label>\n    \n    \n    <label class=\"api-status-label stable\">稳定</label>\n    \n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  <p class=\"short-description\"></p><p translation-origin=\"off\">Conditionally includes a template based on the value of an <code>expression</code>.</p>\n<p translation-result=\"\">根据 <code>expression</code> 表达式的值，有条件的包含某个模板。</p>\n<p></p>\n  \n\n  \n\n  <section class=\"directive-overview\">\n<code-example language=\"ts\" hidecopy=\"true\">\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({ selector: '[<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>]' })\nclass <a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a> {\n  <a class=\"code-anchor\" href=\"api/common/NgIf#ngIf\">set ngIf: any</a>\n  <a class=\"code-anchor\" href=\"api/common/NgIf#ngIfThen\">set ngIfThen: TemplateRef&#x3C;NgIfContext> | null</a>\n  <a class=\"code-anchor\" href=\"api/common/NgIf#ngIfElse\">set ngIfElse: TemplateRef&#x3C;NgIfContext> | null</a>\n}\n</code-example>\n</section>\n\n  \n\n  \n  \n<section class=\"selectors\">\n  <h2 id=\"selectors\">选择器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgIf#selectors\"><i class=\"material-icons\">link</i></a></h2>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading selector\">\n  [<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>]\n  </code-example>\n</section>\n\n\n  \n<section class=\"inputs\">\n  <h2 id=\"输入参数\">输入参数<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgIf#输入参数\"><i class=\"material-icons\">link</i></a></h2>\n  \n  <div class=\"input\">\n    <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 绑定到 <code><a href=\"api/common/NgIf#ngIf\" class=\"code-anchor\">NgIf.ngIf</a></code>\n    \n  </div>\n  \n  <div class=\"input\">\n    <code><a href=\"api/common/NgIf#ngIfThen\" class=\"code-anchor\">ngIfThen</a></code> 绑定到 <code><a href=\"api/common/NgIf#ngIfThen\" class=\"code-anchor\">NgIf.ngIfThen</a></code>\n    \n  </div>\n  \n  <div class=\"input\">\n    <code><a href=\"api/common/NgIf#ngIfElse\" class=\"code-anchor\">ngIfElse</a></code> 绑定到 <code><a href=\"api/common/NgIf#ngIfElse\" class=\"code-anchor\">NgIf.ngIfElse</a></code>\n    \n  </div>\n  \n</section>\n\n  \n  \n\n\n  \n<section class=\"description\">\n  <h2 id=\"description\">说明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgIf#description\"><i class=\"material-icons\">link</i></a></h2>\n  <p translation-origin=\"off\"><code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> evaluates the <code>expression</code> and then renders the <code>then</code> or <code>else</code> template in its place\nwhen expression is truthy or falsy respectively. Typically the:</p>\n<p translation-result=\"\"><code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 会对 <code>expression</code> 进行求值，如果为真，则在原地渲染 <code>then</code> 模板，否则渲染 <code>else</code> 模板。通常：</p>\n<ul>\n<li>\n<p translation-origin=\"off\"><code>then</code> template is the inline template of <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> unless bound to a different value.</p>\n<p translation-result=\"\"><code>then</code> 模板就是 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 中内联的模板 —— 除非你指定了另一个值。</p>\n</li>\n<li>\n<p translation-origin=\"off\"><code>else</code> template is blank unless it is bound.</p>\n<p translation-result=\"\"><code>else</code> 模板是空白的 —— 除非你另行指定了。</p>\n</li>\n</ul>\n<h2 translation-origin=\"off\" id=\"most-common-usage\">Most common usage<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgIf#most-common-usage\"><i class=\"material-icons\">link</i></a></h2>\n<h2 translation-result=\"\" id=\"most-common-usage\">常见用法<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgIf#most-common-usage\"><i class=\"material-icons\">link</i></a></h2>\n<p translation-origin=\"off\">The most common usage of the <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> directive is to conditionally show the inline template as\nseen in this example:</p>\n<p translation-result=\"\"><code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 指令最常见的用法是根据条件显示其内联模板，比如：</p>\n<code-example>\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'ng-if-simple',\n  <a href=\"api/core/Component#template\" class=\"code-anchor\">template</a>: `\n    &#x3C;button (click)=\"show = !show\">{{show ? 'hide' : 'show'}}&#x3C;/button>\n    show = {{show}}\n    &#x3C;br>\n    &#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"show\"><a href=\"api/http/ResponseContentType#Text\" class=\"code-anchor\">Text</a> to show&#x3C;/div>\n`\n})\nclass NgIfSimple {\n  show: boolean = true;\n}\n\n</code-example>\n<h2 translation-origin=\"off\" id=\"showing-an-alternative-template-using-else\">Showing an alternative template using <code>else</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgIf#showing-an-alternative-template-using-else\"><i class=\"material-icons\">link</i></a></h2>\n<h2 translation-result=\"\" id=\"showing-an-alternative-template-using-codeelsecode\">通过 <code>else</code> 显示另一个模板<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgIf#showing-an-alternative-template-using-codeelsecode\"><i class=\"material-icons\">link</i></a></h2>\n<p translation-origin=\"off\">If it is necessary to display a template when the <code>expression</code> is falsy use the <code>else</code> template\nbinding as shown. Note that the <code>else</code> binding points to a <code>&#x3C;ng-template></code> labeled <code>#elseBlock</code>.\nThe template can be defined anywhere in the component view but is typically placed right after\n<code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> for readability.</p>\n<p translation-result=\"\">如果 <code>expression</code> 为假时有必要显示一个模板，就可以用上述的 <code>else</code> 模板来进行绑定。\n注意，<code>else</code> 绑定指向的是一个带有 <code>#elseBlock</code> 标签的 <code>&#x3C;ng-template></code> 元素。\n该模板可以定义在此组件视图中的任何地方，但为了提高可读性，通常会放在 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 的紧下方。</p>\n<code-example>\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'ng-if-else',\n  <a href=\"api/core/Component#template\" class=\"code-anchor\">template</a>: `\n    &#x3C;button (click)=\"show = !show\">{{show ? 'hide' : 'show'}}&#x3C;/button>\n    show = {{show}}\n    &#x3C;br>\n    &#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"show; else elseBlock\"><a href=\"api/http/ResponseContentType#Text\" class=\"code-anchor\">Text</a> to show&#x3C;/div>\n    &#x3C;ng-template #elseBlock>Alternate text while primary text is hidden&#x3C;/ng-template>\n`\n})\nclass NgIfElse {\n  show: boolean = true;\n}\n\n</code-example>\n<h2 translation-origin=\"off\" id=\"using-non-inlined-then-template\">Using non-inlined <code>then</code> template<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgIf#using-non-inlined-then-template\"><i class=\"material-icons\">link</i></a></h2>\n<h2 translation-result=\"\" id=\"using-non-inlined-codethencode-template\">使用非内联的 <code>then</code> 模板<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgIf#using-non-inlined-codethencode-template\"><i class=\"material-icons\">link</i></a></h2>\n<p translation-origin=\"off\">Usually the <code>then</code> template is the inlined template of the <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>, but it can be changed using\na binding (just like <code>else</code>). Because <code>then</code> and <code>else</code> are bindings, the template references can\nchange at runtime as shown in this example.</p>\n<p translation-result=\"\">通常，<code>then</code> 模板就是 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 的内联模板，不过你也可以通过绑定机制（就像 <code>else</code> 那样）来修改它。\n因为 <code>then</code> 和 <code>else</code> 都是绑定，因此可以在运行期间改变这个模板引用 —— 如下例所示。</p>\n<code-example>\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'ng-if-then-else',\n  <a href=\"api/core/Component#template\" class=\"code-anchor\">template</a>: `\n    &#x3C;button (click)=\"show = !show\">{{show ? 'hide' : 'show'}}&#x3C;/button>\n    &#x3C;button (click)=\"switchPrimary()\">Switch Primary&#x3C;/button>\n    show = {{show}}\n    &#x3C;br>\n    &#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"show; then thenBlock; else elseBlock\">this is ignored&#x3C;/div>\n    &#x3C;ng-template #primaryBlock>Primary text to show&#x3C;/ng-template>\n    &#x3C;ng-template #secondaryBlock>Secondary text to show&#x3C;/ng-template>\n    &#x3C;ng-template #elseBlock>Alternate text while primary text is hidden&#x3C;/ng-template>\n`\n})\nclass NgIfThenElse implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  thenBlock: <a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>&#x3C;any>|null = null;\n  show: boolean = true;\n\n  @<a href=\"api/core/ViewChild\" class=\"code-anchor\">ViewChild</a>('primaryBlock')\n  primaryBlock: <a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>&#x3C;any>|null = null;\n  @<a href=\"api/core/ViewChild\" class=\"code-anchor\">ViewChild</a>('secondaryBlock')\n  secondaryBlock: <a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>&#x3C;any>|null = null;\n\n  switchPrimary() {\n    this.thenBlock = this.thenBlock === this.primaryBlock ? this.secondaryBlock : this.primaryBlock;\n  }\n\n  ngOnInit() { this.thenBlock = this.primaryBlock; }\n}\n\n</code-example>\n<h2 translation-origin=\"off\" id=\"storing-conditional-result-in-a-variable\">Storing conditional result in a variable<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgIf#storing-conditional-result-in-a-variable\"><i class=\"material-icons\">link</i></a></h2>\n<h2 translation-result=\"\" id=\"storing-conditional-result-in-a-variable\">把条件结果保存在变量中<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgIf#storing-conditional-result-in-a-variable\"><i class=\"material-icons\">link</i></a></h2>\n<p translation-origin=\"off\">A common pattern is that we need to show a set of properties from the same object. If the\nobject is undefined, then we have to use the safe-traversal-operator <code>?.</code> to guard against\ndereferencing a <code>null</code> value. This is especially the case when waiting on async data such as\nwhen using the <code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a></code> pipe as shown in following example:</p>\n<p translation-result=\"\">一种常见的需求模式为：我们要显示来自同一个对象的一组属性。如果该对象是 undefined，那么我们就不得不使用安全遍历操作符 <code>?.</code> 来防止引用到空对象。\n尤其是在使用 <code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a></code> 管道等待异步数据时，例如：</p>\n<code-example>\nHello {{ (userStream|async)?.last }}, {{ (userStream|async)?.first }}!\n</code-example>\n<p translation-origin=\"off\">There are several inefficiencies in the above example:</p>\n<p translation-result=\"\">上面这个例子中有一系列低效代码：</p>\n<ul>\n<li>\n<p translation-origin=\"off\">We create multiple subscriptions on <code>userStream</code>. One for each <code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a></code> pipe, or two in the\nexample above.</p>\n<p translation-result=\"\">我们在 <code>userStream</code> 上创建了多个订阅。每个 <code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a></code> 管道都有一个，比如上面这个例子中就用了两个。</p>\n</li>\n<li>\n<p translation-origin=\"off\">We cannot display an alternative screen while waiting for the data to arrive asynchronously.</p>\n<p translation-result=\"\">在等待异步数据到来的时候，我们没法显示一个备用视图（如 loading）。</p>\n</li>\n<li>\n<p translation-origin=\"off\">We have to use the safe-traversal-operator <code>?.</code> to access properties, which is cumbersome.</p>\n<p translation-result=\"\">我们不得不使用安全遍历操作符 <code>?.</code> 来访问属性，太繁琐了。</p>\n</li>\n<li>\n<p translation-origin=\"off\">We have to place the <code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a></code> pipe in parenthesis.</p>\n<p translation-result=\"\">我们不得不把 <code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a></code> 管道放进圆括号里。</p>\n</li>\n</ul>\n<p translation-origin=\"off\">A better way to do this is to use <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> and store the result of the condition in a local\nvariable as shown in the the example below:</p>\n<p translation-result=\"\">更好的方式是使用 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>，并把该条件的结果存到局部变量里，例如：</p>\n<code-example>\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'ng-if-let',\n  <a href=\"api/core/Component#template\" class=\"code-anchor\">template</a>: `\n    &#x3C;button (click)=\"nextUser()\">Next <a href=\"api/common/http/HttpEventType#User\" class=\"code-anchor\">User</a>&#x3C;/button>\n    &#x3C;br>\n    &#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"userObservable | async as user; else loading\">\n      Hello {{user.last}}, {{user.first}}!\n    &#x3C;/div>\n    &#x3C;ng-template #loading let-user>Waiting... (user is {{user|<a href=\"api/common/JsonPipe\" class=\"code-anchor\">json</a>}})&#x3C;/ng-template>\n`\n})\nclass NgIfAs {\n  userObservable = new Subject&#x3C;{first: string, last: string}>();\n  first = ['John', 'Mike', 'Mary', 'Bob'];\n  firstIndex = 0;\n  last = ['Smith', 'Novotny', 'Angular'];\n  lastIndex = 0;\n\n  nextUser() {\n    let first = this.first[this.firstIndex++];\n    if (this.firstIndex >= this.first.length) this.firstIndex = 0;\n    let last = this.last[this.lastIndex++];\n    if (this.lastIndex >= this.last.length) this.lastIndex = 0;\n    this.userObservable.next({first, last});\n  }\n}\n\n</code-example>\n<p translation-origin=\"off\">Notice that:</p>\n<p translation-result=\"\">注意：</p>\n<ul>\n<li>\n<p translation-origin=\"off\">We use only one <code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a></code> pipe and hence only one subscription gets created.</p>\n<p translation-result=\"\">我们只用了一个 <code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a></code> 管道，因此也只会进行一次订阅。</p>\n</li>\n<li>\n<p translation-origin=\"off\"><code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> stores the result of the <code>userStream|async</code> in the local variable <code>user</code>.</p>\n<p translation-result=\"\"><code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 把 <code>userStream|async</code> 的结果保存在了局部变量 <code>user</code> 中。</p>\n</li>\n<li>\n<p translation-origin=\"off\">The local <code>user</code> can then be bound repeatedly in a more efficient way.</p>\n<p translation-result=\"\">局部变量 <code>user</code> 可以反复绑定 —— 这很高效。</p>\n</li>\n<li>\n<p translation-origin=\"off\">No need to use the safe-traversal-operator <code>?.</code> to access properties as <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> will only\ndisplay the data if <code>userStream</code> returns a value.</p>\n<p translation-result=\"\">不需要使用安全遍历操作符 <code>?.</code> 来访问属性，因为 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 只有在 <code>userStream</code> 有数据时才会显示内容。</p>\n</li>\n<li>\n<p translation-origin=\"off\">We can display an alternative template while waiting for the data.</p>\n<p translation-result=\"\">在等待数据到达时，我们可以显示一个代用模板。</p>\n</li>\n</ul>\n<h3 translation-origin=\"off\" id=\"syntax\">Syntax<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgIf#syntax\"><i class=\"material-icons\">link</i></a></h3>\n<h3 translation-result=\"\" id=\"syntax-1\">语法<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgIf#syntax-1\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-origin=\"off\">Simple form:</p>\n<p translation-result=\"\">简单形式：</p>\n<ul>\n<li><code>&#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"condition\">...&#x3C;/div></code></li>\n<li><code>&#x3C;ng-template [<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>]=\"condition\">&#x3C;div>...&#x3C;/div>&#x3C;/ng-template></code></li>\n</ul>\n<p translation-origin=\"off\">Form with an else block:</p>\n<p translation-result=\"\">带有 <code>else</code> 块的形式：</p>\n<code-example>\n&#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"condition; else elseBlock\">...&#x3C;/div>\n&#x3C;ng-template #elseBlock>...&#x3C;/ng-template>\n</code-example>\n<p translation-origin=\"off\">Form with a <code>then</code> and <code>else</code> block:</p>\n<p translation-result=\"\">带有 <code>then</code> 和 <code>else</code> 块的形式：</p>\n<code-example>\n&#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"condition; then thenBlock else elseBlock\">&#x3C;/div>\n&#x3C;ng-template #thenBlock>...&#x3C;/ng-template>\n&#x3C;ng-template #elseBlock>...&#x3C;/ng-template>\n</code-example>\n<p translation-origin=\"off\">Form with storing the value locally:</p>\n<p translation-result=\"\">保存到局部变量的形式：</p>\n<code-example>\n&#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"condition as value; else elseBlock\">{{value}}&#x3C;/div>\n&#x3C;ng-template #elseBlock>...&#x3C;/ng-template>\n</code-example>\n\n</section>\n\n\n  \n\n\n  \n\n  \n\n  \n\n<section class=\"instance-properties\">\n  <h2 id=\"属性\">属性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgIf#属性\"><i class=\"material-icons\">link</i></a></h2>\n  <table class=\"is-full-width list-table property-table\">\n    <thead>\n      <tr>\n        <th>属性名</th>\n        <th>类型</th>\n        <th>说明</th>\n      </tr>\n    </thead>\n    <tbody>\n    \n      <tr class=\"instance-property\">\n        <td><a id=\"ngIf\"></a>ngIf</td>\n        <td><label class=\"property-type-label\"><code>any</code></label></td>\n        <td>\n          \n          \n          \n        </td>\n    </tr>\n    \n      <tr class=\"instance-property\">\n        <td><a id=\"ngIfThen\"></a>ngIfThen</td>\n        <td><label class=\"property-type-label\"><code><a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>&#x3C;<a href=\"api/common/NgIfContext\" class=\"code-anchor\">NgIfContext</a>> | null</code></label></td>\n        <td>\n          \n          \n          \n        </td>\n    </tr>\n    \n      <tr class=\"instance-property\">\n        <td><a id=\"ngIfElse\"></a>ngIfElse</td>\n        <td><label class=\"property-type-label\"><code><a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>&#x3C;<a href=\"api/common/NgIfContext\" class=\"code-anchor\">NgIfContext</a>> | null</code></label></td>\n        <td>\n          \n          \n          \n        </td>\n    </tr>\n    \n    </tbody>\n  </table>\n</section>\n\n  \n\n\n  \n\n  \n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - api/animations/state\n - api/common\n - api/common/CommonModule\n - api/common/NgForOf\n - api/core/ContentChild\n - api/core/ContentChildren\n - api/core/NgZone\n - api/core/ViewChild\n - api/core/ViewChildren\n - api/forms/FormControlName\n - api/forms/FormGroupDirective\n - api/forms/FormGroupName\n - api/forms/NgModelGroup\n - guide/ajs-quick-reference\n - guide/aot-compiler\n - guide/architecture-components\n - guide/dependency-injection-in-action\n - guide/displaying-data\n - guide/docs-style-guide\n - guide/dynamic-form\n - guide/feature-modules\n - guide/form-validation\n - guide/frequent-ngmodules\n - guide/ngmodule-api\n - guide/ngmodule-faq\n - guide/router\n - guide/sharing-ngmodules\n - guide/structural-directives\n - guide/styleguide\n - guide/template-syntax\n - guide/testing\n - guide/upgrade\n - presskit\n - tutorial/toh-pt2\n - tutorial/toh-pt3\n - tutorial/toh-pt4\n - tutorial/toh-pt5\n - tutorial/toh-pt6\n-->\n<!-- links from this doc:\n - /api\n - api/common\n - api/common/JsonPipe\n - api/common/NgIf#description\n - api/common/NgIf#most-common-usage\n - api/common/NgIf#ngIf\n - api/common/NgIf#ngIfElse\n - api/common/NgIf#ngIfThen\n - api/common/NgIf#ngif\n - api/common/NgIf#selectors\n - api/common/NgIf#showing-an-alternative-template-using-codeelsecode\n - api/common/NgIf#showing-an-alternative-template-using-else\n - api/common/NgIf#storing-conditional-result-in-a-variable\n - api/common/NgIf#syntax\n - api/common/NgIf#syntax-1\n - api/common/NgIf#using-non-inlined-codethencode-template\n - api/common/NgIf#using-non-inlined-then-template\n - api/common/NgIf#属性\n - api/common/NgIf#输入参数\n - api/common/NgIfContext\n - api/common/http/HttpEventType#User\n - api/core/Component\n - api/core/Component#template\n - api/core/Directive\n - api/core/OnInit\n - api/core/TemplateRef\n - api/core/ViewChild\n - api/core/testing/async\n - api/http/ResponseContentType#Text\n - https://github.com/angular/angular/edit/master/packages/common/src/directives/ng_if.ts?message=docs(common)%3A%20describe%20your%20change...#L10-L237\n - https://github.com/angular/angular/tree/6.1.0/packages/common/src/directives/ng_if.ts#L10-L237\n-->"
}